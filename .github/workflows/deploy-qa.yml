# Deploy to GitHub Pages on Pull Request (QA Environment)
name: Deploy QA to GitHub Pages

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment per PR, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages-qa-${{ github.event.pull_request.number }}"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    container:
      image: node:18-bullseye
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          # Token to use for Pages setup
          token: ${{ secrets.GITHUB_TOKEN }}
          # Enable Pages if not already enabled
          enablement: true
      
      - name: Build for QA
        run: |
          npm run build -- --mode qa
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # Deployment job for QA
  deploy:
    environment:
      name: qa
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    container:
      image: debian:bullseye-slim
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Comment PR with QA URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const qaUrl = '${{ steps.deployment.outputs.page_url }}';
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸš€ QA Environment Deployed')
            );
            
            const body = `ðŸš€ **QA Environment Deployed Successfully!**
            
            Preview your changes at: ${qaUrl}
            
            This deployment is automatically updated when you push new commits to this PR.
            
            ---
            *Built from commit: ${context.sha.substring(0, 7)}*`;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
            }